<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0-windows</TargetFramework>
    <UseWPF>true</UseWPF>
    <!--
    All plugin projects should add <EnableDynamicLoading>true</EnableDynamicLoading> to the project properties so that they copy all of their dependencies to the output
    https://docs.microsoft.com/en-us/dotnet/core/tutorials/creating-app-with-plugin-support#plugin-with-library-dependencies
    -->
    <EnableDynamicLoading>true</EnableDynamicLoading>
    <OutputPath>..\bin\plugins\$(MSBuildProjectName)</OutputPath>
    <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == ''">win-x64</RuntimeIdentifier>
    <SelfContained>false</SelfContained>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="CefSharp.Wpf.NETCore" Version="120.1.110" />
    <!--
    We need to use the instance of Castle.Windsor provided by our host application 
    so we exclude runtime assets
    -->
    <PackageReference Include="Castle.Windsor" Version="6.0.0">
      <ExcludeAssets>runtime</ExcludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <!-- 
    The <Private>false</Private> element is important.
    This tells MSBuild to not copy Contracts.dll to the output directory for this plugin.
    If the Contracts.dll assembly is present in the output directory,
    PluginLoadContext will find the assembly there and load it when it loads the Contracts.dll assembly.
    https://docs.microsoft.com/en-us/dotnet/core/tutorials/creating-app-with-plugin-support#simple-plugin-with-no-dependencies
    -->
    <ProjectReference Include="..\Contracts\Contracts.csproj">
      <Private>false</Private>
      <ExcludeAssets>runtime</ExcludeAssets>
    </ProjectReference>
  </ItemGroup>

</Project>
